[
  {
    "id": 1,
    "category": "htmlcss",
    "question": "Qual a diferença entre `id` e `class` no HTML?",
    "options": [
      "id pode ser usado várias vezes, class não",
      "id é único na página, class pode ser reutilizada",
      "id é usado só em CSS, class é só para JS",
      "id não existe mais no HTML5"
    ],
    "correctIndex": 1
  },
  {
    "id": 2,
    "category": "htmlcss",
    "question": "O que é o Box Model no CSS?",
    "options": [
      "Um sistema de grid flexível",
      "Uma forma de estilizar imagens",
      "A estrutura de layout formada por content, padding, border e margin",
      "Um tipo de display especial para mobile"
    ],
    "correctIndex": 2
  },
  {
    "id": 3,
    "category": "htmlcss",
    "question": "Para que serve o atributo `alt` na tag `<img>`?",
    "options": [
      "Aplicar filtros na imagem",
      "Descrever a imagem para acessibilidade e SEO",
      "Deixar a imagem responsiva",
      "Carregar imagens automaticamente"
    ],
    "correctIndex": 1
  },
  {
    "id": 4,
    "category": "htmlcss",
    "question": "Qual a diferença entre `position: relative` e `absolute`?",
    "options": [
      "Relative posiciona em relação à página, absolute ao elemento pai",
      "Relative é mais leve, absolute é pesado",
      "Absolute remove o elemento da página",
      "Relative permite usar z-index, absolute não"
    ],
    "correctIndex": 0
  },
  {
    "id": 5,
    "category": "htmlcss",
    "question": "O que significa “semântica” no HTML?",
    "options": [
      "Uso de animações com significado",
      "Usar CSS dentro do HTML",
      "Dar significado ao conteúdo com tags apropriadas como `<article>`, `<nav>`, etc.",
      "Usar comentários explicativos no código"
    ],
    "correctIndex": 2
  },
  {
    "id": 6,
    "category": "htmlcss",
    "question": "Qual a função da tag <meta> no HTML?",
    "options": [
      "Facilita a requisição de api.",
      "Adiciona um título a página",
      "Define o idioma da página",
      "Descreve o conteúdo de uma página web"
    ],
    "correctIndex": 2
  },
  {
    "id": 7,
    "category": "htmlcss",
    "question": "Para que serve o atributo `href` na tag `<a>`?",
    "options": [
      "Estilizar links",
      "Indicar o destino do link",
      "Adicionar um título ao link",
      "Fazer upload de arquivos"
    ],
    "correctIndex": 1
  },
  {
    "id": 8,
    "category": "htmlcss",
    "question": "O que o `display: flex` faz no CSS?",
    "options": [
      "Remove o elemento do layout",
      "Transforma o container em um flex container para alinhar os itens",
      "Aplica uma sombra",
      "Cria um botão flexível"
    ],
    "correctIndex": 1
  },
  {
    "id": 9,
    "category": "htmlcss",
    "question": "Qual a função da tag `<label>` no HTML?",
    "options": [
      "Estilizar formulários",
      "Exibir mensagens de erro",
      "Associar texto a um campo de formulário",
      "Validar campos automaticamente"
    ],
    "correctIndex": 2
  },
  {
    "id": 10,
    "category": "htmlcss",
    "question": "O que `z-index` controla no CSS?",
    "options": [
      "Tamanho da fonte",
      "A cor de fundo",
      "A ordem de empilhamento de elementos",
      "A opacidade do texto"
    ],
    "correctIndex": 2
  },
  {
    "id": 11,
    "category": "javascripttypescript",
    "question": "Qual a diferença entre `var`, `let` e `const`?",
    "options": [
      "var e const são iguais, let é diferente",
      "let e const têm escopo de bloco, var não",
      "const pode ser alterado, var não",
      "let tem escopo global, var não"
    ],
    "correctIndex": 1
  },
  {
    "id": 12,
    "category": "javascripttypescript",
    "question": "O que é uma closure em JavaScript?",
    "options": [
      "Uma função que retorna outra função",
      "Uma função que lembra do seu escopo mesmo depois de executada",
      "Um método exclusivo do TypeScript",
      "Um bug causado por escopos"
    ],
    "correctIndex": 1
  },
  {
    "id": 13,
    "category": "javascripttypescript",
    "question": "O que é uma Promise?",
    "options": [
      "Um tipo de loop assíncrono",
      "Uma função que nunca retorna",
      "Um objeto que representa uma operação assíncrona e seu resultado futuro",
      "Uma variável reservada do JavaScript"
    ],
    "correctIndex": 2
  },
  {
    "id": 14,
    "category": "javascripttypescript",
    "question": "Quais as vantagens do TypeScript sobre JavaScript puro?",
    "options": [
      "Permite usar mais `var`",
      "Evita erros em tempo de compilação com tipagem estática",
      "É mais rápido que JavaScript",
      "Não precisa de transpiler"
    ],
    "correctIndex": 1
  },
  {
    "id": 15,
    "category": "javascripttypescript",
    "question": "Como funciona a tipagem no TypeScript?",
    "options": [
      "Tipagem dinâmica e fraca",
      "Tipagem forte e implícita",
      "Tipagem estática e explícita (mas pode ser inferida)",
      "Não há tipagem no TypeScript"
    ],
    "correctIndex": 2
  },
  {
    "id": 16,
    "category": "javascripttypescript",
    "question": "O que significa o termo 'hoisting' em JavaScript?",
    "options": [
      "Funções assíncronas",
      "Movimentar variáveis e funções para o topo do escopo",
      "Executar código mais rápido",
      "Importar módulos automaticamente"
    ],
    "correctIndex": 1
  },
  {
    "id": 17,
    "category": "javascripttypescript",
    "question": "Qual o resultado de `typeof []` em JavaScript?",
    "options": [
      "`object`",
      "`array`",
      "`undefined`",
      "`list`"
    ],
    "correctIndex": 0
  },
  {
    "id": 18,
    "category": "javascripttypescript",
    "question": "Para que serve o operador `??` (nullish coalescing)?",
    "options": [
      "Verifica igualdade estrita",
      "Define variáveis constantes",
      "Retorna o lado direito apenas se o lado esquerdo for null ou undefined",
      "Concatena strings"
    ],
    "correctIndex": 2
  },
  {
    "id": 19,
    "category": "javascripttypescript",
    "question": "O que são tipos literais em TypeScript?",
    "options": [
      "Tipos que só existem no console",
      "Tipos fixos e exatos como 'success' ou 42",
      "Tipos de texto grandes",
      "Tipos que só funcionam com números"
    ],
    "correctIndex": 1
  },
  {
    "id": 20,
    "category": "javascripttypescript",
    "question": "O que o método `map()` faz em arrays?",
    "options": [
      "Remove itens duplicados",
      "Retorna o primeiro item do array",
      "Cria um novo array aplicando uma função a cada item",
      "Filtra elementos falsy"
    ],
    "correctIndex": 2
  },
  {
    "id": 21,
    "category": "reacttailwind",
    "question": "Qual a diferença entre componente de classe e componente funcional no React?",
    "options": [
      "Classe é usada para estilização, função para lógica",
      "Componentes de classe usam estado com `this`, funcionais usam hooks",
      "Componentes funcionais não podem receber props",
      "Classe é mais rápida que função"
    ],
    "correctIndex": 1
  },
  {
    "id": 22,
    "category": "reacttailwind",
    "question": "O que são Hooks no React?",
    "options": [
      "Funções para estilizar componentes",
      "Funções que permitem usar estado e outras features do React em componentes funcionais",
      "Bibliotecas externas do React",
      "APIs usadas para chamadas HTTP"
    ],
    "correctIndex": 1
  },
  {
    "id": 23,
    "category": "reacttailwind",
    "question": "Para que serve o `useEffect` no React?",
    "options": [
      "Criar componentes",
      "Definir estados",
      "Lidar com efeitos colaterais como chamadas à API",
      "Estilizar componentes com Tailwind"
    ],
    "correctIndex": 2
  },
  {
    "id": 24,
    "category": "reacttailwind",
    "question": "Como funciona a renderização condicional em React?",
    "options": [
      "Usa `if/else` direto no return do componente",
      "É feita apenas com switch",
      "Usando expressões ternárias, operadores lógicos ou condições antes do return",
      "Só é possível com Redux"
    ],
    "correctIndex": 2
  },
  {
    "id": 25,
    "category": "reacttailwind",
    "question": "O que o Tailwind CSS faz?",
    "options": [
      "Substitui o React",
      "Cria estilos automaticamente com IA",
      "É um framework CSS com classes utilitárias para estilizar diretamente no HTML/JSX",
      "É uma API de animações para React"
    ],
    "correctIndex": 2
  },
  {
    "id": 26,
    "category": "reacttailwind",
    "question": "Para que serve o `useState` em React?",
    "options": [
      "Criar variáveis de estilo",
      "Executar animações",
      "Gerenciar estado em componentes funcionais",
      "Importar dados externos"
    ],
    "correctIndex": 2
  },
  {
    "id": 27,
    "category": "reacttailwind",
    "question": "O que o `key` faz em uma lista de elementos renderizados?",
    "options": [
      "Define o estilo de cada item",
      "Cria rotas automáticas",
      "Ajuda o React a identificar quais itens mudaram",
      "Serve para criptografar os dados"
    ],
    "correctIndex": 2
  },
  {
    "id": 28,
    "category": "reacttailwind",
    "question": "Como o Tailwind aplica estilos aos elementos?",
    "options": [
      "Usa classes baseadas em utilitários diretamente no HTML/JSX",
      "Cria arquivos de estilo automaticamente",
      "Aplica CSS inline via JavaScript",
      "Depende de arquivos JSON externos"
    ],
    "correctIndex": 0
  },
  {
    "id": 29,
    "category": "reacttailwind",
    "question": "O que faz o hook `useRef`?",
    "options": [
      "Cria referências para elementos DOM ou valores mutáveis sem re-render",
      "Atualiza o estado de forma assíncrona",
      "Serve apenas para animações",
      "Modifica diretamente o CSS do componente"
    ],
    "correctIndex": 0
  },
  {
    "id": 30,
    "category": "reacttailwind",
    "question": "Qual o papel do `children` em um componente React?",
    "options": [
      "Representar um valor booleano",
      "Importar bibliotecas",
      "Receber e renderizar elementos passados entre tags do componente",
      "Criar variáveis locais"
    ],
    "correctIndex": 2
  }
]